ROLE  
You are running inside Cursor with terminal + filesystem access.  
Your job: prepare this laptop for MCP-based development.  
- Read project config from `.env` (or create it from `.env.example`).  
- Ensure MCP tools are installed.  
- Ensure minimal Context7 rules exist.  
- Start the MCP servers and Playwright.  
- Run a health check across all MCPs.  
- Print a clear status summary (✅ or ❌) and FIX instructions if anything fails.  

PROJECT CONTEXT  
- `.env` keys used (defaults in parentheses):  
  - `POSTGRES_URL` (postgresql://readonly:password@localhost:5432/mydb)  
  - `SQLITE_DB` (./dev.db)  
  - `OPENAPI_SPEC` (https://petstore3.swagger.io/api/v3/openapi.json)  
  - `CONTEXT7_PORT` (8765), `POSTGRES_PORT` (7771), `SQLITE_PORT` (7772), `OPENAPI_PORT` (7773)  
- If `.env` is missing: copy `.env.example` → `.env`.  

REQUIRED TOOLS  
- Node + npm (for npx)  
- Context7 MCP → `context7-mcp`  
- Postgres MCP → `@modelcontextprotocol/server-postgres`  
- SQLite MCP → `mcp-sqlite`  
- OpenAPI MCP → `mcp-openapi-server`  
- Playwright MCP (stdio) → `npx @playwright/mcp@latest`  
- Playwright runtime (CLI + browsers) → `npx playwright install`  

STEPS  

1. **Prepare environment**  
```bash
[ -f .env ] || cp .env.example .env
export $(grep -v '^#' .env | xargs)
Ensure Context7 config

bash
Copy
Edit
mkdir -p $HOME/.context7
if [ ! -f $HOME/.context7/context7.toml ]; then
  cat > $HOME/.context7/context7.toml <<'EOF'
[server]
allow_roots = ["{cwd}"]
[[calls]]
match = "(create|update|refactor|fix).*(code|tests|pytest|jest|playwright|lint|build)"
resources = ["file://{cwd}/.context/claude.md"]
EOF
fi
mkdir -p .context
[ -f .context/claude.md ] || echo "Output unified diffs only. Goal → Approach → Tests. Pin new deps with reason." > .context/claude.md
Check installations

bash
Copy
Edit
node -v && npm -v
context7-mcp --version || echo "missing: context7-mcp"
npx -y @playwright/mcp@latest --help || echo "missing: @playwright/mcp"
npx -y playwright --version || echo "missing: playwright-cli"
npx -y @modelcontextprotocol/server-postgres --help || echo "missing: postgres-mcp"
mcp-sqlite --help || echo "missing: mcp-sqlite"
mcp-openapi-server --help || echo "missing: mcp-openapi-server"
Install if missing

bash
Copy
Edit
npm install -g @modelcontextprotocol/server-postgres
git clone https://github.com/jparkerweb/mcp-sqlite ~/.mcp/mcp-sqlite || true
cd ~/.mcp/mcp-sqlite && npm install && npm link
git clone https://github.com/ivo-toby/mcp-openapi-server ~/.mcp/mcp-openapi-server || true
cd ~/.mcp/mcp-openapi-server && npm install && npm link
npx -y playwright install
Start servers

bash
Copy
Edit
context7-mcp --config $HOME/.context7/context7.toml --port ${CONTEXT7_PORT:-8765} --cwd $PWD >/tmp/context7.log 2>&1 &
npx -y @modelcontextprotocol/server-postgres --url "$POSTGRES_URL" --mode http --port ${POSTGRES_PORT:-7771} >/tmp/postgres-mcp.log 2>&1 &
mcp-sqlite --db "${SQLITE_DB:-./dev.db}" --port ${SQLITE_PORT:-7772} >/tmp/sqlite-mcp.log 2>&1 &
mcp-openapi-server --spec "${OPENAPI_SPEC}" --port ${OPENAPI_PORT:-7773} >/tmp/openapi-mcp.log 2>&1 &
Register MCPs in Cursor

json
Copy
Edit
{
  "mcpServers": {
    "context7":  { "type": "http",  "url": "http://127.0.0.1:${CONTEXT7_PORT}" },
    "playwright":{ "type": "stdio", "command": "npx", "args": ["@playwright/mcp@latest"] },
    "postgres":  { "type": "http",  "url": "http://127.0.0.1:${POSTGRES_PORT}" },
    "sqlite":    { "type": "http",  "url": "http://127.0.0.1:${SQLITE_PORT}" },
    "openapi":   { "type": "http",  "url": "http://127.0.0.1:${OPENAPI_PORT}" }
  }
}
Health check

bash
Copy
Edit
# Expect success
@postgres query: SELECT 1;
@sqlite query: SELECT 1;
@openapi list_operations
@playwright version
# Trigger Context7 with a trivial refactor
OUTPUT

Checklist: Installed / Installed now / Missing

Health results for each MCP

Final line:

✅ “All MCPs installed and healthy”

❌ “Setup incomplete — see FIX instructions”

